
#line 3 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    //#define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 104
#define YY_END_OF_BUFFER 105
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[292] =
    {   0,
      102,  102,  105,  103,  104,  102,  103,  104,  102,  104,
      103,  104,   10,  103,  104,  103,  104,  103,  104,  103,
      104,   11,  103,  104,   16,  103,  104,   14,  103,  104,
       15,  103,  104,  103,  104,   13,  103,  104,   17,  103,
      104,   12,  103,  104,   41,  103,  104,   36,  103,  104,
       40,  103,  104,  103,  104,  103,  104,  103,  104,  103,
      104,  103,  104,   19,  103,  104,  103,  104,  103,  104,
      103,  104,  103,  104,  103,  104,  103,  104,   28,  103,
      104,  103,  104,  103,  104,  103,  104,   18,  103,  104,
      103,  104,  103,  104,  103,  104,  103,  104,  103,  104,

      103,  104,  103,  104,  103,  104,  103,  104,  103,  104,
      103,  104,  103,  104,  103,  104,  103,  104,   28,  103,
      104,  103,  104,  103,  104,  103,  104,  103,  104,  103,
      104,  103,  104,  103,  104,  103,  104,   11,  102,  103,
      104,   28,  103,  104,  102,   35,    8,    2,   13,   39,
       38,   56,   57,    6,    7,   37,   37,   37,   27,   26,
       25,   27,   26,   25,   25,   26,   27,   33,   50,    6,
        7,   27,   25,   37,   27,   50,   33,   25,   56,   25,
       26,   27,   37,    1,    9,   13,16387,16387,   32,   48,
       81,   47,   44,   46,   30,16387,   30,   24,16387,   24,

       23,16387,   23,   34,   23,   24,   23,   24,   30,   21,
    16387,   21,   45,   42,   20,16387,   20,16387,   43,   23,
       32,   23,   45,   20,   21,   23,   24,   30,    5,16387,
     8195,   13,    4,   49,   82,   75,   74,   71,   72,   22,
       79, 8195, 8195,   63,   64,   78,   80,   76,   77,   63,
       64,   61,   53,   62,   59,   67,   83,   29,   65,   84,
       52,   66,   61,   62,   51,   70,   97,   86,   85,   90,
       91,   54,   68,  101,   69,   94,   58,   31,   99,  100,
       87,   73,   60,   98,   92,   93,   95,   55,   88,   89,
       96

    } ;

static yyconst flex_int16_t yy_accept[416] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   13,   16,   18,
       20,   22,   25,   28,   31,   34,   36,   39,   42,   45,
       48,   51,   54,   56,   58,   60,   62,   64,   67,   69,
       71,   73,   75,   77,   79,   82,   84,   86,   88,   91,
       93,   95,   97,   99,  101,  103,  105,  107,  109,  111,
      113,  115,  117,  119,  122,  124,  126,  128,  130,  132,
      134,  136,  138,  142,  145,  146,  147,  148,  148,  148,
      148,  149,  149,  150,  150,  151,  152,  152,  152,  153,
      153,  153,  153,  153,  153,  153,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  155,  156,  157,  158,  159,  159,  159,  159,
      159,  159,  159,  159,  160,  161,  162,  162,  163,  164,
      165,  165,  168,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  170,  170,  170,  170,  170,  170,  170,
      171,  172,  172,  173,  173,  173,  174,  174,  174,  174,
      175,  177,  178,  180,  180,  184,  184,  185,  185,  186,
      188,  189,  189,  190,  190,  190,  190,  190,  190,  191,
      191,  192,  192,  192,  192,  192,  193,  193,  193,  193,
      193,  193,  193,  194,  194,  195,  195,  195,  195,  197,
      198,  200,  201,  203,  204,  204,  205,  205,  207,  210,

      210,  210,  210,  210,  210,  212,  213,  213,  213,  214,
      215,  217,  218,  218,  219,  219,  219,  220,  220,  220,
      220,  221,  221,  222,  222,  222,  224,  229,  231,  231,
      232,  233,  233,  233,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  235,  236,  236,
      237,  237,  237,  237,  237,  237,  238,  238,  238,  238,
      238,  239,  239,  239,  239,  239,  239,  239,  240,  240,
      240,  241,  241,  242,  242,  242,  243,  244,  244,  245,
      245,  245,  245,  245,  245,  245,  246,  246,  246,  246,
      246,  247,  247,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  249,  250,  250,  252,  253,  253,  253,
      253,  253,  254,  255,  256,  257,  257,  257,  258,  258,
      258,  258,  258,  259,  259,  260,  260,  260,  260,  260,
      260,  260,  260,  261,  261,  262,  263,  265,  265,  266,
      266,  266,  266,  267,  268,  268,  268,  268,  268,  269,
      270,  270,  270,  272,  272,  272,  273,  273,  273,  273,
      273,  274,  274,  274,  274,  275,  275,  276,  276,  276,
      276,  276,  277,  277,  277,  277,  278,  278,  279,  280,
      280,  281,  282,  282,  282,  282,  282,  282,  283,  284,

      285,  285,  286,  287,  288,  289,  290,  290,  290,  290,
      291,  291,  291,  292,  292
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    6,    7,    1,    8,    9,
       10,   11,   12,   10,   13,    1,   14,   15,   16,   17,
       15,   15,   15,   15,   15,   18,   15,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   35,   36,   37,   38,   39,   40,
       35,   41,   42,   43,   44,   45,   46,   35,   47,   35,
        1,    1,    1,    1,    1,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   57,   58,   59,   60,
       61,   62,   57,   63,   64,   65,   66,   67,   68,   69,
       70,   57,   71,   72,   71,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    4,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[425] =
    {   0,
        0,    0,  758,  759,   71,   73,  735,  759,    0,  750,
      747,  759,  759,  759,  759,   62,   66,  759,  759,  732,
      759,  731,    0,    0,   25,   55,   31,   45,   64,   33,
      691,   71,   50,   49,   96,  688,  687,  697,   93,   80,
       91,  700,  695,   39,  119,   54,   66,  139,   58,  685,
      113,  126,  127,  151,  682,  681,  691,  161,  158,  104,
      694,  689,  193,  239,  218,  759,  759,    0,    0,  732,
      759,  221,  225,    0,  759,  759,    0,  688,  759,  682,
      689,  144,  680,  687,  668,  759,   84,  670,  672,  661,
      672,  673,  680,  671,  678,  674,  151,  154,  666,  662,

      656,    0,    0,    0,  181,  759,  657,  660,  651,  659,
      657,  158,  182,    0,  190,  213,  199,  651,  218,  245,
      656,  268,  663,  661,  193,  249,  662,  648,  195,  261,
      132,  281,  759,  240,  262,  648,  265,  651,  660,  759,
      759,  270,  759,  651,  658,  288,  294,  321,  119,  296,
      334,  271,  324,  346,  392,    0,  759,  391,  759,  441,
      348,    0,  759,  642,  640,  647,  634,  641,  759,  649,
      759,  647,  635,  633,  640,  759,  631,  636,  634,  629,
      643,  625,  759,  637,  759,  622,  622,  634,  456,  298,
      420,  759,  457,  759,  620,  759,  635,  759,  326,  627,

       53,  621,  380,  623,  468,  759,  619,  614,  759,  622,
      475,  759,  619,  486,  658,  623,  759,  611,  610,  608,
      653,  462,  614,  149,   86,  759,  358,  492,  398,  759,
      520,  215,  232,  759,  605,  603,  607,  614,  614,  608,
      598,  598,  596,  600,  594,  597,  759,  759,  608,  759,
      593,  590,  599,  496,  469,  475,  601,  592,  599,  594,
      759,  593,  600,  595,  380,  598,  585,  293,  213,  592,
      759,  580,  759,  578,  576,  759,  759,  575,  759,  579,
      586,  589,  571,  583,  569,  759,  579,  568,  563,  572,
      759,  577,  759,  575,  575,  570,  577,  503,  377,  558,

      560,  574,  570,  559,  559,  553,  555,  543,  539,  533,
      523,  533,  759,  759,  521,  759,  759,  529,  523,  519,
      525,  759,  759,  759,  438,  516,  527,  759,  512,  523,
      508,  506,  759,  520,  759,  509,  514,  498,  512,  511,
      502,  506,  759,  505,  759,  759,  759,  486,  759,  474,
      468,  459,  759,  759,  462,  446,  432,  423,  506,  759,
      423,  421,  512,  425,  431,  444,  420,  419,  417,  408,
      759,  404,  398,  372,  759,  375,  759,  501,  361,  364,
      200,  759,  353,  341,  333,  759,  310,  759,  759,  307,
      759,  759,  285,  286,  280,  279,  275,  759,  759,  759,

      271,  759,  759,  379,  759,  519,  238,  220,  211,  759,
      201,   71,  759,  759,  589,  593,  597,  600,  602,  604,
      606,  608,  610,  612
    } ;

static yyconst flex_int16_t yy_def[425] =
    {   0,
      414,    1,  414,  414,  414,  414,  414,  414,  415,  416,
      417,  414,  414,  414,  414,  414,  418,  414,  414,  414,
      414,  414,  418,  419,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  415,  420,  417,
      414,  414,  421,  421,  414,  414,  422,  414,  414,  421,
      421,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  421,  421,  414,  414,  414,  414,  414,  414,  414,

      414,  421,  421,  421,  414,  414,  414,  414,  414,  414,
      414,  414,  421,  421,  421,  421,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  421,  414,  414,  414,  414,
      421,  414,  414,  414,  421,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  423,  414,  414,  414,  414,
      414,  424,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,    0,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414
    } ;

static yyconst flex_int16_t yy_nxt[832] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   12,
       13,   14,   15,   16,   17,   17,   17,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   23,   31,   32,   23,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   23,   43,   44,   45,   46,
       47,   48,   49,    4,   50,   51,    4,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,    4,    4,   62,
       63,   64,   65,   65,   65,   65,   72,   72,   72,   72,
       73,   73,   73,   73,   78,   80,  102,  103,   88,   79,
       81,   89,   90,   99,   92,  100,   91,  107,   78,   93,

      110,  108,  259,   79,  111,  131,   82,   83,  104,  112,
      109,   88,   84,   90,   89,   85,   94,   91,   99,  260,
      100,   95,  413,   96,   86,  113,   87,  132,  140,  141,
      105,  165,   97,  135,  114,   98,  126,  115,  116,  164,
      133,   65,  106,   65,  127,  239,  137,  117,  248,   83,
      106,  134,  136,  128,   84,  137,  118,  129,  130,  119,
      120,  121,  137,  211,  130,  136,  220,  122,  137,   94,
       82,   83,  105,  107,   95,  137,   84,  108,  110,   85,
      142,  169,  111,  134,  106,  212,  109,  112,   86,  143,
       87,   94,  119,  120,   65,   65,   95,  166,   96,  240,

      176,  174,  117,  212,  130,  132,  177,   97,  167,  173,
       98,  118,  127,  253,  119,  120,  121,  187,  133,   65,
       65,  128,  122,  181,  188,  129,  130,  189,  191,  134,
      276,  277,  130,  158,  159,   72,   72,   72,   72,  160,
      160,  160,  160,  202,  190,  181,  203,  276,  277,  190,
      192,  193,  181,  190,  204,  209,  192,  210,  412,  411,
      395,  192,  311,   65,  134,  394,  190,  195,  142,  144,
      190,  212,  312,  194,  145,  205,  106,  143,  192,  410,
      119,  146,  130,  194,  194,  409,  147,  206,   65,  192,
      148,  144,  214,  212,  111,  215,  149,  206,  150,  151,

      136,  152,  119,  153,  154,  194,  198,   97,   86,  206,
      155,  212,  212,  190,  215,  190,  194,  215,  215,  406,
      206,  200,  201,  310,  405,  212,  194,  255,  198,  213,
      404,  179,  206,  215,  212,  190,  215,  190,  181,  199,
      215,  190,  213,  403,  402,  310,  223,  212,  194,  255,
      401,  217,  212,  230,  215,  255,  230,  182,  400,  221,
      181,  230,  194,  171,  310,  212,  190,  181,  218,  255,
      207,  202,  206,  399,  222,  271,  215,  255,  172,  185,
      183,  232,  204,  398,  226,  167,  210,  255,  190,  195,
      397,  178,  190,  224,  206,  221,  208,  255,  196,  225,

      188,  184,  396,  233,  197,  229,  229,  229,  229,  255,
      262,  159,  229,  229,  229,  229,  263,  206,  206,  333,
      264,  407,  215,  212,  395,  230,  394,  306,  230,  255,
      198,  307,  262,  230,  392,  305,  391,  190,  263,  220,
      206,  333,  264,  407,  215,  212,  230,  219,  333,  230,
      407,  265,  198,  232,  230,  231,  231,  231,  231,  190,
      390,  230,  230,  227,  230,  230,  389,  388,  387,  230,
      230,  352,  386,  230,  232,  233,  230,  385,  383,  382,
      230,  230,  384,  230,  378,  255,  377,  375,  230,  232,
      232,  230,  262,  352,  230,  374,  233,  230,  263,  230,

      230,  232,  264,  271,  384,  230,  373,  255,  232,  352,
      299,  233,  233,  372,  262,  384,  300,  237,  371,  232,
      263,  294,  295,  233,  264,  232,  296,  255,  370,  369,
      233,  297,  299,  265,  231,  231,  231,  231,  300,  376,
      299,  233,  393,  294,  295,  368,  300,  233,  296,  379,
      332,  380,  408,  297,  330,  329,  367,  366,  331,  365,
      364,  376,  363,  362,  393,  361,  360,  298,  359,  358,
      357,  379,  393,  380,  408,  356,  355,  376,  354,  353,
      351,  350,  349,  381,  348,  347,  346,  345,  344,  343,
      408,   67,  342,   67,   69,   69,   69,   70,   70,   70,

       70,   70,   74,   74,   77,   77,  156,  156,  161,  161,
      162,  162,  228,  228,  234,  234,  341,  340,  339,  338,
      337,  336,  335,  334,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  309,  308,  307,  306,  305,  304,
      303,  302,  301,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  244,
      271,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  261,  258,  257,  256,  254,  253,  252,  251,  250,
      249,  248,  247,  246,  245,  244,  243,  242,  241,  240,

      239,  238,  237,  236,  235,  220,  219,  218,  217,  216,
      208,  207,  201,  200,  197,  196,  186,  185,  184,  183,
      182,  180,  179,  178,  175,  174,  173,  174,  173,  172,
      171,  170,  169,  168,  165,  164,  165,  164,  163,  157,
      139,  138,  125,  124,  123,  101,  139,  138,  125,  124,
      123,  101,   76,   75,   71,   68,   66,  414,    3,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414
    } ;

static yyconst flex_int16_t yy_chk[832] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    6,    6,   16,   16,   16,   16,
       17,   17,   17,   17,   25,   26,   32,   32,   27,   25,
       26,   27,   28,   30,   29,   30,   28,   33,   44,   29,

       34,   33,  201,   44,   34,   40,   26,   26,   32,   34,
       33,   46,   26,   47,   46,   26,   29,   47,   49,  201,
       49,   29,  412,   29,   26,   35,   26,   40,   51,   51,
       32,   87,   29,   41,   35,   29,   39,   35,   35,   87,
       40,    5,   32,    6,   39,  225,   60,   35,  225,   45,
       51,   40,   41,   39,   45,   41,   35,   39,   39,   35,
       35,   35,   41,  131,   39,   60,  149,   35,   60,   48,
       45,   45,   51,   52,   48,   60,   45,   52,   53,   45,
       54,  149,   53,   59,   51,  131,   52,   53,   45,   54,
       45,   48,   54,   54,   63,   63,   48,   82,   48,  224,

       97,   98,   54,  131,   58,   59,   97,   48,   82,   98,
       48,   54,   58,  224,   54,   54,   54,  112,   59,   65,
       65,   58,   54,  105,  112,   58,   58,  113,  115,   59,
      232,  232,   58,   72,   72,   72,   72,   72,   72,   73,
       73,   73,   73,  125,  117,  105,  125,  233,  233,  113,
      115,  116,  105,  113,  125,  129,  119,  129,  411,  409,
      381,  115,  269,   63,   64,  381,  117,  117,   64,   64,
      117,  134,  269,  116,   64,  126,   64,   64,  119,  408,
       64,   64,   64,  120,  116,  407,   64,  130,   65,  119,
       64,   64,  135,  134,   64,  137,   64,  126,   64,   64,

       64,   64,   64,   64,   64,  120,  122,   64,   64,  130,
       64,  134,  132,  122,  135,  142,  120,  137,  146,  401,
      126,  152,  152,  268,  397,  147,  146,  190,  122,  132,
      396,  152,  130,  135,  132,  122,  137,  142,  150,  122,
      146,  142,  147,  395,  394,  268,  150,  147,  146,  190,
      393,  147,  132,  161,  153,  199,  161,  147,  390,  146,
      150,  161,  153,  147,  268,  147,  148,  150,  148,  190,
      148,  148,  154,  387,  148,  227,  153,  199,  148,  148,
      148,  161,  148,  385,  153,  148,  153,  227,  148,  148,
      384,  151,  148,  151,  154,  153,  151,  199,  151,  151,

      151,  151,  383,  161,  154,  158,  158,  158,  158,  227,
      203,  229,  229,  229,  229,  229,  203,  154,  155,  299,
      203,  404,  155,  155,  380,  191,  379,  265,  191,  227,
      155,  265,  203,  191,  376,  265,  374,  155,  203,  155,
      155,  299,  203,  404,  155,  155,  160,  155,  299,  160,
      404,  203,  155,  191,  160,  160,  160,  160,  160,  155,
      373,  189,  193,  155,  189,  193,  372,  370,  369,  189,
      193,  325,  368,  205,  160,  191,  205,  367,  365,  364,
      211,  205,  366,  211,  362,  189,  361,  358,  211,  189,
      193,  214,  222,  325,  214,  357,  160,  228,  222,  214,

      228,  205,  222,  214,  366,  228,  356,  189,  211,  325,
      255,  189,  193,  355,  222,  366,  256,  222,  352,  214,
      222,  254,  254,  205,  222,  228,  254,  189,  351,  350,
      211,  254,  255,  222,  231,  231,  231,  231,  256,  359,
      255,  214,  378,  254,  254,  348,  256,  228,  254,  363,
      298,  363,  406,  254,  298,  298,  344,  342,  298,  341,
      340,  359,  339,  338,  378,  337,  336,  254,  334,  332,
      331,  363,  378,  363,  406,  330,  329,  359,  327,  326,
      321,  320,  319,  363,  318,  315,  312,  311,  310,  309,
      406,  415,  308,  415,  416,  416,  416,  417,  417,  417,

      417,  417,  418,  418,  419,  419,  420,  420,  421,  421,
      422,  422,  423,  423,  424,  424,  307,  306,  305,  304,
      303,  302,  301,  300,  297,  296,  295,  294,  292,  290,
      289,  288,  287,  285,  284,  283,  282,  281,  280,  278,
      275,  274,  272,  270,  267,  266,  264,  263,  262,  260,
      259,  258,  257,  253,  252,  251,  249,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  223,
      221,  220,  219,  218,  216,  215,  213,  210,  208,  207,
      204,  202,  200,  197,  195,  188,  187,  186,  184,  182,
      181,  180,  179,  178,  177,  175,  174,  173,  172,  170,

      168,  167,  166,  165,  164,  145,  144,  139,  138,  136,
      128,  127,  124,  123,  121,  118,  111,  110,  109,  108,
      107,  101,  100,   99,   96,   95,   94,   93,   92,   91,
       90,   89,   88,   85,   84,   83,   81,   80,   78,   70,
       62,   61,   57,   56,   55,   50,   43,   42,   38,   37,
       36,   31,   22,   20,   11,   10,    7,    3,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#include <string.h>
#include <stdlib.h>
#include <malloc.h>

#include "typedef.h"
#include "mempool.h"
#include "ytab.h"
#include "umflexlexer.h"

#define YY_DECL int umFlexLexer::yylex(MarcParser::YYSTYPE &yylval, void *allocator)
#define YY_SKIP_YYWRAP

int yyFlexLexer::yylex()
{
    return 0;
}

int yyFlexLexer::yywrap()
{
    return 1;
}

#define INITIAL 0

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, (int)max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 415 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 414 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.rulestr(yytext);
                  return MarcParser::STRING;
                }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str("");
                  return MarcParser::STRING;
                }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext+1);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return MarcParser::I1; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return MarcParser::I2; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::STAG;
                }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::FIX;
                }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return MarcParser::FIN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
return *yytext;
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return MarcParser::SEP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->val=atoi(yytext);
                  return MarcParser::NUMERIC;
                }
	YY_BREAK
case 14:
YY_RULE_SETUP
return MarcParser::PLUS;
	YY_BREAK
case 15:
YY_RULE_SETUP
return MarcParser::MINUS;
	YY_BREAK
case 16:
YY_RULE_SETUP
return MarcParser::MULTIPLY;
	YY_BREAK
case 17:
YY_RULE_SETUP
return MarcParser::DIVIDE;
	YY_BREAK
case 18:
YY_RULE_SETUP
return MarcParser::VARS;
	YY_BREAK
case 19:
YY_RULE_SETUP
return MarcParser::VARD;
	YY_BREAK
case 20:
YY_RULE_SETUP
return MarcParser::VAR_TAG;
	YY_BREAK
case 21:
YY_RULE_SETUP
return MarcParser::VAR_SUB;
	YY_BREAK
case 22:
YY_RULE_SETUP
return MarcParser::VAR_UTF8;
	YY_BREAK
case 23:
YY_RULE_SETUP
return MarcParser::VAR_NTO;
	YY_BREAK
case 24:
YY_RULE_SETUP
return MarcParser::VAR_NSO;
	YY_BREAK
case 25:
YY_RULE_SETUP
return MarcParser::VAR_NT;
	YY_BREAK
case 26:
YY_RULE_SETUP
return MarcParser::VAR_NS;
	YY_BREAK
case 27:
YY_RULE_SETUP
return MarcParser::VAR_NO;
	YY_BREAK
case 28:
YY_RULE_SETUP
return MarcParser::VAR_N;
	YY_BREAK
case 29:
YY_RULE_SETUP
return MarcParser::VAR_NEWEST;
	YY_BREAK
case 30:
YY_RULE_SETUP
return MarcParser::VAR_NEW;
	YY_BREAK
case 31:
YY_RULE_SETUP
return MarcParser::CHECK;
	YY_BREAK
case 32:
YY_RULE_SETUP
return MarcParser::AND;
	YY_BREAK
case 33:
YY_RULE_SETUP
return MarcParser::OR;
	YY_BREAK
case 34:
YY_RULE_SETUP
return MarcParser::NOT;
	YY_BREAK
case 35:
YY_RULE_SETUP
return MarcParser::NE;
	YY_BREAK
case 36:
YY_RULE_SETUP
return MarcParser::EQ;
	YY_BREAK
case 37:
YY_RULE_SETUP
return MarcParser::_IN;
	YY_BREAK
case 38:
YY_RULE_SETUP
return MarcParser::GE;
	YY_BREAK
case 39:
YY_RULE_SETUP
return MarcParser::LE;
	YY_BREAK
case 40:
YY_RULE_SETUP
return MarcParser::GT;
	YY_BREAK
case 41:
YY_RULE_SETUP
return MarcParser::LT;
	YY_BREAK
case 42:
YY_RULE_SETUP
return MarcParser::STR;
	YY_BREAK
case 43:
YY_RULE_SETUP
return MarcParser::VAL;
	YY_BREAK
case 44:
YY_RULE_SETUP
return MarcParser::LEN;
	YY_BREAK
case 45:
YY_RULE_SETUP
return MarcParser::STO;
	YY_BREAK
case 46:
YY_RULE_SETUP
return MarcParser::MEM;
	YY_BREAK
case 47:
YY_RULE_SETUP
return MarcParser::EXC;
	YY_BREAK
case 48:
YY_RULE_SETUP
return MarcParser::CLR;
	YY_BREAK
case 49:
YY_RULE_SETUP
return MarcParser::FROM;
	YY_BREAK
case 50:
YY_RULE_SETUP
return MarcParser::TO;
	YY_BREAK
case 51:
YY_RULE_SETUP
return MarcParser::BETWEEN;
	YY_BREAK
case 52:
YY_RULE_SETUP
return MarcParser::_STRICT;
	YY_BREAK
case 53:
YY_RULE_SETUP
return MarcParser::_DELETE;
	YY_BREAK
case 54:
YY_RULE_SETUP
return MarcParser::REPLACE;
	YY_BREAK
case 55:
YY_RULE_SETUP
return MarcParser::REPLACEOCC;
	YY_BREAK
case 56:
YY_RULE_SETUP
return MarcParser::AT;
	YY_BREAK
case 57:
YY_RULE_SETUP
return MarcParser::BY;
	YY_BREAK
case 58:
YY_RULE_SETUP
return MarcParser::BEGINNING;
	YY_BREAK
case 59:
YY_RULE_SETUP
return MarcParser::END;
	YY_BREAK
case 60:
YY_RULE_SETUP
return MarcParser::BOTH;
	YY_BREAK
case 61:
YY_RULE_SETUP
return MarcParser::BFIRST;
	YY_BREAK
case 62:
YY_RULE_SETUP
return MarcParser::EFIRST;
	YY_BREAK
case 63:
YY_RULE_SETUP
return MarcParser::BLAST;
	YY_BREAK
case 64:
YY_RULE_SETUP
return MarcParser::ELAST;
	YY_BREAK
case 65:
YY_RULE_SETUP
return MarcParser::WNUMBER;
	YY_BREAK
case 66:
YY_RULE_SETUP
return MarcParser::WSTRING;
	YY_BREAK
case 67:
YY_RULE_SETUP
return MarcParser::EXISTS;
	YY_BREAK
case 68:
YY_RULE_SETUP
return MarcParser::EXISTSIN;
	YY_BREAK
case 69:
YY_RULE_SETUP
return MarcParser::PRECEDES;
	YY_BREAK
case 70:
YY_RULE_SETUP
return MarcParser::FOLLOWS;
	YY_BREAK
case 71:
YY_RULE_SETUP
return MarcParser::REDO;
	YY_BREAK
case 72:
YY_RULE_SETUP
return MarcParser::SORT;
	YY_BREAK
case 73:
YY_RULE_SETUP
return MarcParser::SORTFIELD;
	YY_BREAK
case 74:
YY_RULE_SETUP
return MarcParser::NEXT;
	YY_BREAK
case 75:
YY_RULE_SETUP
return MarcParser::LAST;
	YY_BREAK
case 76:
YY_RULE_SETUP
return MarcParser::TABLE;
	YY_BREAK
case 77:
YY_RULE_SETUP
return MarcParser::UPPER;
	YY_BREAK
case 78:
YY_RULE_SETUP
return MarcParser::LOWER;
	YY_BREAK
case 79:
YY_RULE_SETUP
return MarcParser::YEAR;
	YY_BREAK
case 80:
YY_RULE_SETUP
return MarcParser::MONTH;
	YY_BREAK
case 81:
YY_RULE_SETUP
return MarcParser::DAY;
	YY_BREAK
case 82:
YY_RULE_SETUP
return MarcParser::HOUR;
	YY_BREAK
case 83:
YY_RULE_SETUP
return MarcParser::MINUTE;
	YY_BREAK
case 84:
YY_RULE_SETUP
return MarcParser::SECOND;
	YY_BREAK
case 85:
YY_RULE_SETUP
return MarcParser::ORDINAL;
	YY_BREAK
case 86:
YY_RULE_SETUP
return MarcParser::NEXTSUB;
	YY_BREAK
case 87:
YY_RULE_SETUP
return MarcParser::NEXTSUBIN;
	YY_BREAK
case 88:
YY_RULE_SETUP
return MarcParser::PREVIOUSSUB;
	YY_BREAK
case 89:
YY_RULE_SETUP
return MarcParser::PREVIOUSSUBIN;
	YY_BREAK
case 90:
YY_RULE_SETUP
return MarcParser::REGFIND;
	YY_BREAK
case 91:
YY_RULE_SETUP
return MarcParser::REGFIND;
	YY_BREAK
case 92:
YY_RULE_SETUP
return MarcParser::REGFINDNUM;
	YY_BREAK
case 93:
YY_RULE_SETUP
return MarcParser::REGFINDPOS;
	YY_BREAK
case 94:
YY_RULE_SETUP
return MarcParser::REGMATCH;
	YY_BREAK
case 95:
YY_RULE_SETUP
return MarcParser::REGREPLACE;
	YY_BREAK
case 96:
YY_RULE_SETUP
return MarcParser::REGREPLACETABLE;
	YY_BREAK
case 97:
YY_RULE_SETUP
return MarcParser::INTABLE;
	YY_BREAK
case 98:
YY_RULE_SETUP
return MarcParser::MOVEBEFORE;
	YY_BREAK
case 99:
YY_RULE_SETUP
return MarcParser::MOVEAFTER;
	YY_BREAK
case 100:
YY_RULE_SETUP
return MarcParser::MOVEFIRST;
	YY_BREAK
case 101:
YY_RULE_SETUP
return MarcParser::MOVELAST;
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case 103:
YY_RULE_SETUP
;
	YY_BREAK
case 104:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			(int)YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 415 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 415 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 414);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int)YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int)((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (int) (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

